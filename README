user:kcon (Conley, Kevin)

###############################
# Instructions to run project #
###############################

Note: My setup is Xcode 6.2 on OSX 10.10.2 targeting iOS 8.2. Please email
me at kcon@stanford.edu if you have any questions or run into any issues
while testing my project.

1. Open Marguerite.xcworkspace. I used CocoaPods, but all of the Pod files
   are included in my submission, so everything should be ready to go when you
   open the workspace file.
2. Build and run the project.
3. Make sure to allow location services to test out the "nearby stops" feature
   and to see your location on the live map.
4. The app starts on the "Next Shuttle" tab. You can search for a stop by name
   or stop number, and if location services are enabled, then the 3 closest
   stops will appear in the "Nearby Stops" section of the table along with the
   distance from you to those stops. You can also use the table index along the
   right edge of the screen to quickly jump to a group of stops by their first
   letter.
5. Tapping on a stop segues (if on an iPhone) or shows in the detail view (if
   on an iPad) a list of the next shuttle times for that stop. Tapping on
   "Add Favorite Stop" marks the stop as a favorite, and if you go back to the
   "Next Shuttle" screen, then you should see a new "Favorite Stops" section
   just below "Nearby Stops" that lists all of your favorite stops. Tapping on
   "View on Map" switches to the "Live Map" tab and shows that stop on the map.
6. Tapping the "Live Map" tab switches to a live map of the currently running
   Marguerite shuttles, which appear on the map as colored arrows with the name
   of the shuttle's route as text just above the arrow. The live shuttles are
   refreshed every 3 seconds, and over time you should see the shuttles move
   around on the map as well as rotate to reflect the direction the shuttles
   are moving in. Also on the live map you will see two buttons in a toolbar;
   tapping the one marked with the Stanford logo will zoom to Stanford's campus
   on the map, and tapping the one that looks like an arrow pointer will show
   your current location on the map. The live map also shows all of the stops
   in the Marguerite system as circles; tapping on one will show a callout with
   the name of the stop, and tapping the callout will segue to show the next
   shuttle departure times for that stop.
7. Tapping the "Route Maps" tab switches to a view with a table that lists all
   of the routes in the Marguerite system. Tapping on one will segue (if on
   an iPhone) or show in the detail view (if on an iPad) a PDF of the map of
   the selected route. You can zoom in on the map and move it around. This
   works for all routes except "RMH", which doesn't seem to have a map PDF on
   the Marguerite website. For the maps that do work, once they are loaded,
   they are cached locally on the disk, so if you disable your network, you'll
   still be able to view the map PDFs that you previously viewed.
8. Tapping the "About" tab switches to a table view with several links for
   contacting the Marguerite department, submitting feedback, etc. The links
   that go to websites will open in a web view within the app (instead of going
   to Safari). Note that the links that call phone numbers or open the mail app
   will only work on a physical iOS device.
9. In all of the aforementioned views, rotating your device should rotate
   the view as well, with a relatively aesthetic result.

#############################
# List of iOS features used #
#############################

Custom app icon and launch image (all sizes).
Customized apperance using appearance proxies for UINavigationBar, UIBarButtonItem, and UITabBar.
Storyboard structured with split view, tab bar, and navigation controllers.
UITabBarController with 4 custom icons and set selectedIndex.
2 uses of UIToolBar in UIViewControllers with both flexible and fixed-width spacing.
2 Show and 2 Show Detail segues.
Custom split view controller that uses UISplitViewControllerDelegate to never collapse.
3 dynamic UITableViews, 1 static UITableView.
2 custom UITableViewCells with programmatic drawing.
UISearchDisplayController/Bar utilizing NSPredicate for searching.
HEAVY Section index titles for UITableView, utilizing UILocalizedIndexedCollation for creating titles.
UIRefreshControl used to refresh UITableView.
CLLocationManager and CLLocationManagerDelegate for authorizing/accessing user location.
NSDateFormatter for formatting dates as strings.
NSMutableOrderedSet for organizing table view sections.
NSCoding used to encode objects to be stored using NSUserDefaults.
NSTimer used to schedule tasks, invalidate used to cancel tasks.
MKMapView with MKMapViewDelegate, setRegion, setCenterCoordinate, and selectAnnotation.
UIView animation of MKAnnotationViews.
HEAVY Custom MKPointAnnotations and MKPointAnnotationViews (with callouts) with programmatic layout/drawing.
UIApplication sharedApplication used for openURL.
UIActivityIndicatorView programmatically added to UINavigationItem.
UIWebView with UIWebViewDelegate for didStart/FinishLoad, goBack, goForward.
NSXMLParser with NSXMLParserDelegate methods.
NSURLConnection sendAsynchronousRequest with NSJSONSerialization to parse response.
Extensions for UIColor, UIImage, and NSError.
NSURLCache configuration.
HEAVY Integration and ObjC bridging with FMDB, GCDiscreetNotificationView, and Instabug 3rd party libraries.
